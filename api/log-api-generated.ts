/* tslint:disable */
/* eslint-disable */
/*
Zapier AI Actions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ExecuteResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the execution log for a given execution log id.
         * @summary Get Execution Log Endpoint
         * @param {string} executionLogId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog: async (executionLogId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'executionLogId' is not null or undefined
            assertParamExists('getExecutionLog', 'executionLogId', executionLogId)
            const localVarPath = `/api/v1/execution-log/{execution_log_id}`
                .replace(`{${"execution_log_id"}}`, encodeURIComponent(String(executionLogId !== undefined ? executionLogId : `-execution_log_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessPointApiKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "accessPointApiKeyHeader", configuration })
            // authentication AccessPointApiKeyQuery required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "accessPointApiKeyQuery", configuration})
            // authentication AccessPointOAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "AccessPointOAuth", [], configuration)
            // authentication SessionAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "nlasession", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/execution-log/{execution_log_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the execution log for a given execution log id.
         * @summary Get Execution Log Endpoint
         * @param {LogApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionLog(requestParameters: LogApiGetExecutionLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionLog(requestParameters.executionLogId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * Get the execution log for a given execution log id.
         * @summary Get Execution Log Endpoint
         * @param {LogApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog(requestParameters: LogApiGetExecutionLogRequest, options?: AxiosRequestConfig): AxiosPromise<ExecuteResponse> {
            return localVarFp.getExecutionLog(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getExecutionLog operation in LogApi.
 * @export
 * @interface LogApiGetExecutionLogRequest
 */
export type LogApiGetExecutionLogRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LogApiGetExecutionLog
    */
    readonly executionLogId: string
    
}

/**
 * LogApiGenerated - object-oriented interface
 * @export
 * @class LogApiGenerated
 * @extends {BaseAPI}
 */
export class LogApiGenerated extends BaseAPI {
    /**
     * Get the execution log for a given execution log id.
     * @summary Get Execution Log Endpoint
     * @param {LogApiGetExecutionLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApiGenerated
     */
    public getExecutionLog(requestParameters: LogApiGetExecutionLogRequest, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).getExecutionLog(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
