/* tslint:disable */
/* eslint-disable */
/*
Zapier AI Actions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ExecuteRequest } from '../models';
// @ts-ignore
import { ExecuteResponse } from '../models';
// @ts-ignore
import { ExposedActionResponseSchema } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ActionApi - axios parameter creator
 * @export
 */
export const ActionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.
         * @summary Execute App Action Endpoint
         * @param {string} exposedAppActionId 
         * @param {ExecuteRequest} executeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAppAction: async (exposedAppActionId: string, executeRequest: ExecuteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exposedAppActionId' is not null or undefined
            assertParamExists('executeAppAction', 'exposedAppActionId', exposedAppActionId)
            // verify required parameter 'executeRequest' is not null or undefined
            assertParamExists('executeAppAction', 'executeRequest', executeRequest)
            const localVarPath = `/api/v1/exposed/{exposed_app_action_id}/execute`
                .replace(`{${"exposed_app_action_id"}}`, encodeURIComponent(String(exposedAppActionId !== undefined ? exposedAppActionId : `-exposed_app_action_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessPointApiKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "accessPointApiKeyHeader", configuration })
            // authentication AccessPointApiKeyQuery required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "accessPointApiKeyQuery", configuration})
            // authentication AccessPointOAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "AccessPointOAuth", [], configuration)
            // authentication SessionAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "nlasession", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: executeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/exposed/{exposed_app_action_id}/execute',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(executeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the currently exposed actions for the given account.
         * @summary List Exposed Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExposedActions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/exposed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessPointApiKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "accessPointApiKeyHeader", configuration })
            // authentication AccessPointApiKeyQuery required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "accessPointApiKeyQuery", configuration})
            // authentication AccessPointOAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "AccessPointOAuth", [], configuration)
            // authentication SessionAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "nlasession", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/exposed',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionApi - functional programming interface
 * @export
 */
export const ActionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionApiAxiosParamCreator(configuration)
    return {
        /**
         * Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.
         * @summary Execute App Action Endpoint
         * @param {ActionApiExecuteAppActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeAppAction(requestParameters: ActionApiExecuteAppActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteResponse>> {
            const executeRequest: ExecuteRequest = {
                instructions: requestParameters.instructions,
                preview_only: requestParameters.preview_only
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeAppAction(requestParameters.exposedAppActionId, executeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the currently exposed actions for the given account.
         * @summary List Exposed Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExposedActions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExposedActionResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExposedActions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActionApi - factory interface
 * @export
 */
export const ActionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActionApiFp(configuration)
    return {
        /**
         * Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.
         * @summary Execute App Action Endpoint
         * @param {ActionApiExecuteAppActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAppAction(requestParameters: ActionApiExecuteAppActionRequest, options?: AxiosRequestConfig): AxiosPromise<ExecuteResponse> {
            return localVarFp.executeAppAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the currently exposed actions for the given account.
         * @summary List Exposed Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExposedActions(options?: AxiosRequestConfig): AxiosPromise<ExposedActionResponseSchema> {
            return localVarFp.listExposedActions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for executeAppAction operation in ActionApi.
 * @export
 * @interface ActionApiExecuteAppActionRequest
 */
export type ActionApiExecuteAppActionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ActionApiExecuteAppAction
    */
    readonly exposedAppActionId: string
    
} & ExecuteRequest

/**
 * ActionApiGenerated - object-oriented interface
 * @export
 * @class ActionApiGenerated
 * @extends {BaseAPI}
 */
export class ActionApiGenerated extends BaseAPI {
    /**
     * Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.
     * @summary Execute App Action Endpoint
     * @param {ActionApiExecuteAppActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public executeAppAction(requestParameters: ActionApiExecuteAppActionRequest, options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).executeAppAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the currently exposed actions for the given account.
     * @summary List Exposed Actions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiGenerated
     */
    public listExposedActions(options?: AxiosRequestConfig) {
        return ActionApiFp(this.configuration).listExposedActions(options).then((request) => request(this.axios, this.basePath));
    }
}
